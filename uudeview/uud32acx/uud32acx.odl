// uud32acx.odl : type library source for ActiveX Control project.

// This file will be processed by the Make Type Library (mktyplib) tool to
// produce the type library (uud32acx.tlb) that will become a resource in
// uud32acx.ocx.

#include <olectl.h>
#include <idispids.h>

[ uuid(6FC838A3-A54A-11D0-8988-444553540000), version(1.0),
  helpfile("uud32acx.hlp"),
  helpstring("uud32acx ActiveX Control module"),
  control ]
library UUD32ACXLib
{
	importlib(STDOLE_TLB);
	importlib(STDTYPE_TLB);

	//
	// Include all the help constants
	//

	#include "hlp\Events.hh"
	#include "hlp\Methods.hh"
	#include "hlp\Properties.hh"
	#include "hlp\UUD32ACX.hh"

	//
	// UUD32 constants
	//

	[ uuid(c01e9e00-a826-11d0-8988-444553540000),
	  helpcontext(Messages_Constants), 
      helpstring("Message Severity Levels") ]
	typedef enum {			// Message types
		[ helpcontext(Messages_Constants), helpstring("Message only") ]
		uudMsgMessage = 0,	/* just a message, nothing important */

		[ helpcontext(Messages_Constants), helpstring("Information") ]
		uudMsgNote = 1,		/* something that should be noticed */

		[ helpcontext(Messages_Constants), helpstring("Important message, processing continues") ]
		uudMsgWarning =	2,	/* important msg, processing continues */

		[ helpcontext(Messages_Constants), helpstring("Error, processing stopped") ]
		uudMsgError = 3,	/* processing has been terminated */

		[ helpcontext(Messages_Constants), helpstring("Decoder has crashed, no further commands accepted") ]
		uudMsgFatal = 4,	/* decoder cannot process further requests */

		[ helpcontext(Messages_Constants), helpstring("Severe crash.  Owner should shut down") ]
		uudMsgPanic = 5		/* recovery impossible, app must terminate */
		} Messages;

	[ uuid(3403ce80-a827-11d0-8988-444553540000),
	  helpcontext(H_RETCODE), 
      helpstring("Return Status Codes") ]
	typedef enum {			// Return Codes
		[ helpcontext(H_RETCODE), helpstring("Operation completed successfully") ]
		uudRetOK = 0,		/* everything went fine */

		[ helpcontext(H_RETCODE), helpstring("I/O Error (Disk full, etc.)") ]
		uudRetIOErr = 1,	/* I/O Error - examine errno */

		[ helpcontext(H_RETCODE), helpstring("Out of memory") ]
		uudRetNoMem = 2,	/* not enough memory */

		[ helpcontext(H_RETCODE), helpstring("Illegal parameter") ]
		uudRetIllVal = 3,	/* illegal value for operation */

		[ helpcontext(H_RETCODE), helpstring("No data found to decode") ]
		uudRetNoData = 4,	/* decoder didn't find any data */

		[ helpcontext(H_RETCODE), helpstring("No proper end found") ]
		uudRetNoEnd = 5,	/* encoded data wasn't ended properly */

		[ helpcontext(H_RETCODE), helpstring("Unsupported encoding method") ]
		uudRetUnsup = 6,	/* unsupported function encoding */

		[ helpcontext(H_RETCODE), helpstring("Output file exists") ]
		uudRetExists = 7,	/* file exists decoding */

//		[ helpcontext(H_RETCODE), helpstring("") ]
//		uudRetCont = 8,		/* continue -- special from ScanPart */

		[ helpcontext(H_RETCODE), helpstring("Operation canceled by user") ]
		uudRetCancel = 9	/* operation canceled */
		} ReturnCodes;

	[ uuid(4de9c020-a827-11d0-8988-444553540000),
	  helpcontext(DFileStatus_Constants), 
      helpstring("Decode File Status Mask") ]
	typedef enum {				// File Status Mask
		[ helpcontext(DFileStatus_Constants), helpstring("Read in") ]
		uudFileRead = 0,		/* Read in, but not further processed */

		[ helpcontext(DFileStatus_Constants), helpstring("Missing parts detected") ]
		uudFileMisPart = 1,		/* Missing Parts detected */

		[ helpcontext(DFileStatus_Constants), helpstring("No 'begin' found") ]
		uudFileNoBegin = 2,		/* No 'begin' found */

		[ helpcontext(DFileStatus_Constants), helpstring("No 'end' found") ]
		uudFileNoEnd = 4,		/* No 'end' found */

		[ helpcontext(DFileStatus_Constants), helpstring("No data found") ]
		uudFileNoData = 8,		/* File does not contain valid uudata */

		[ helpcontext(DFileStatus_Constants), helpstring("Ready to decode") ]
		uudFileOK = 16,			/* All Parts found, ready to decode */

		[ helpcontext(DFileStatus_Constants), helpstring("Error while decoding") ]
		uudFileError = 32,		/* Error while decoding */

		[ helpcontext(DFileStatus_Constants), helpstring("Decoded OK") ]
		uudFileDecoded = 64,	/* Successfully decoded */

		[ helpcontext(DFileStatus_Constants), helpstring("Temporary file exists") ]
		uudFileTmpFile = 128,	/* Temporary decoded file exists */

		[ helpcontext(DFileStatus_Constants), helpstring("Filename was generated by the control") ]
		uudFileGenFn = 256
		} DFileStatus;

	[ uuid(59b269c0-a827-11d0-8988-444553540000),
	  helpcontext(Progress_Codes), 
      helpstring("Progress Event Action Codes") ]
	typedef enum {			// Action codes
		[ helpcontext(Progress_Codes), helpstring("No action") ]
		uudActIdle = 0,		/* we don't do anything */

		[ helpcontext(Progress_Codes), helpstring("Scanning input file") ]
		uudActScanning = 1,	/* scanning an input file */

		[ helpcontext(Progress_Codes), helpstring("Decoding") ]
		uudActDecoding = 2,	/* decoding into a temp file */

		[ helpcontext(Progress_Codes), helpstring("Copying file to target") ]
		uudActCopying = 3,	/* copying temp to target */

		[ helpcontext(Progress_Codes), helpstring("Encoding") ]
		uudActEncoding = 4,	/* encoding a file */

		[ helpcontext(Progress_Codes), helpstring("Starting new step") ]
		uudActNewStep = 9
		} ProgressCodes;

	[ uuid(BAE84500-A83D-11d0-8988-444553540000),
	  helpcontext(DFileDetail_Constants), 
      helpstring("DFileDetail Item Selectors") ]
	typedef enum {				// DFileDetail constants
		[ helpcontext(DFileDetail_Constants), helpstring("Status of part") ]
		uudLDState = 0,			// uulist.state

		[ helpcontext(DFileDetail_Constants), helpstring("File permissions on 'begin' line") ]
		uudLDMode = 1,			// uulist.mode

		[ helpcontext(DFileDetail_Constants), helpstring("Part number where 'begin' was detected") ]
		uudLDBegin = 2,			// uulist.begin

		[ helpcontext(DFileDetail_Constants), helpstring("Part number where 'end' was detected") ]
		uudLDEnd = 3,			// uulist.end

		[ helpcontext(DFileDetail_Constants), helpstring("Encoding mode") ]
		uudLDUuDet = 4,			// uulist.uudet

		[ helpcontext(DFileDetail_Constants), helpstring("Status flags") ]
		uudLDFlags = 5,			// uulist.flags

		[ helpcontext(DFileDetail_Constants), helpstring("Approx. size of resulting file") ]
		uudLDSize = 6,			// uulist.size

		[ helpcontext(DFileDetail_Constants), helpstring("Filename") ]
		uudLDFileName = 7,		// uulist.filename

		[ helpcontext(DFileDetail_Constants), helpstring("Subject: line") ]
		uudLDSubF = 8,			// uulist.subfname

		[ helpcontext(DFileDetail_Constants), helpstring("MIME-ID, if any") ]
		uudLDMIMEID = 9,		// uulist.mimeid

		[ helpcontext(DFileDetail_Constants), helpstring("MIME type") ]
		uudLDMIMEType = 10,		// uulist.mimetype

		[ helpcontext(DFileDetail_Constants), helpstring("Name of temp file") ]
		uudLDBinFile = 11,		// uulist.binfile

		[ helpcontext(DFileDetail_Constants), helpstring("List of parts found [SubIndex]") ]
		uudLDHavePart = 12,		// uulist.haveparts[subscr]

		[ helpcontext(DFileDetail_Constants), helpstring("List of missing parts [SubIndex]") ]
		uudLDMissPart = 13,		// uulist.msparts[subscr]

		[ helpcontext(DFileDetail_Constants), helpstring("List of parts in this file [SubIndex]") ]
		uudLDUFPart = 14,		// uulist.thisfile[subscr].partno

		[ helpcontext(DFileDetail_Constants), helpstring("Subject: line of component file [SubIndex]") ]
		uudLDUFrSubj = 15,		// uulist.thisfile[subscr].data.subject

		[ helpcontext(DFileDetail_Constants), helpstring("From: line of component file [SubIndex]") ]
		uudLDUFrOrg = 16,		// uulist.thisfile[subscr].data.origin

		[ helpcontext(DFileDetail_Constants), helpstring("Filename from component file [SubIndex]") ]
		uudLDUFrSFN = 17,		// uulist.thisfile[subscr].data.sfname

		[ helpcontext(DFileDetail_Constants), helpstring("Starting position component file [SubIndex]") ]
		uudLDUFrStart = 18,		// uulist.thisfile[subscr].data.startpos

		[ helpcontext(DFileDetail_Constants), helpstring("Length from component file [SubIndex]") ]
		uudLDUFrLength = 19,	// uulist.thisfile[subscr].data.length

		[ helpcontext(DFileDetail_Constants), helpstring("Number of component files") ]
		uudLDUFrCount = 20		// Number of subparts
		} DFileDetailItems;

	[ uuid(497CDFE0-A976-11d0-8988-444553540000),
	  helpcontext(Encoding_Modes),
      helpstring("Encoding Modes") ]
	typedef enum {				// Encoding mode constants
		[ helpcontext(Encoding_Modes), helpstring("UU Encoding") ]
		uudEncUU = 1,	/* UUencoded data   */

		[ helpcontext(Encoding_Modes), helpstring("Base64 Encoding") ]
		uudEncB64 = 2,	/* Mime-Base64 data */

		[ helpcontext(Encoding_Modes), helpstring("XX Encoding") ]
		uudEncXX = 3,	/* XXencoded data   */

		[ helpcontext(Encoding_Modes), helpstring("BinHex Encoding") ]
		uudEncBinHex = 4,	/* Binhex encoded   */

		[ helpcontext(Encoding_Modes), helpstring("Plain Text") ]
		uudEncPlainText = 5,	/* Plain-Text encoded (MIME) */

		[ helpcontext(Encoding_Modes), helpstring("Quoted-Printable") ]
		uudEncQuotedPrintable = 6,	/* Quoted-Printable (MIME)   */

		[ helpcontext(Encoding_Modes), helpstring("yEnc") ]
		uudEncyEnc = 7	/* yEnc   */
		} EncodeModes;

	[ uuid(1099FB60-A9A1-11d0-8988-444553540000),
	  helpcontext(Header_Styles_Constants), 
      helpstring("Encoding Header Modes") ]
	typedef enum {				// Encoding mode constants
		[ helpcontext(Header_Styles_Constants), helpstring("Standard UUDeview headers") ]
		uudEncHUud = 0,		// No MIME headers (use standard headers)

		[ helpcontext(Header_Styles_Constants), helpstring("Simple MIME headers") ]
		uudEncHSimple = 1,		// Simple MIME (no addressing)

		[ helpcontext(Header_Styles_Constants), helpstring("MIME E-Mail format") ]
		uudEncHMail = 2,		// MIME E-mail format

		[ helpcontext(Header_Styles_Constants), helpstring("MIME News format") ]
		uudEncHNews = 3		// MIME News format
		} EncodeHeaders;

	[ uuid(A7E90540-B10A-11d0-8988-444553540000),
	  helpcontext(ClipFileOperations_Constants), 
      helpstring("ClipboardFile Operations") ]
	typedef enum {				// Encoding mode constants
		[ helpcontext(ClipFileOperations_Constants), helpstring("Load Clipboard from file") ]
		uudCFcff = 0,

		[ helpcontext(ClipFileOperations_Constants), helpstring("Write Clipboard to new file") ]
		uudCFc2nf = 1,

		[ helpcontext(ClipFileOperations_Constants), helpstring("Append Clipboard to file") ]
		uudCFac2f = 2
		} ClipFileOperations;

	//  Primary dispatch interface for CUud32acxCtrl

	[ uuid(6FC838A4-A54A-11D0-8988-444553540000),
	  helpstring("Dispatch interface for Uud32acx Control"), hidden ]
	dispinterface _DUud32acx
	{
		properties:
			// NOTE - ClassWizard will maintain property information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_PROP(CUud32acxCtrl)
			[id(15), helpcontext(Library_Version_Property), helpstring("Current version of UUDeview library")] BSTR LibVersion;
			[id(16), helpcontext(DFCount_Property), helpstring("Number of files in Decode list")] short DFCount;
			[id(1), helpcontext(Fast_Mode_Property), helpstring("Expect only one part per file")] boolean FastMode;
			[id(2), helpcontext(Bracket_Policy_Property), helpstring("Part numbers in brackets before part numbers in parens")] boolean BracketPolicy;
			[id(3), helpcontext(Verbose_Property), helpstring("Report debugging information")] boolean Verbose;
			[id(4), helpcontext(Desperate_Mode_Property), helpstring("Decode all available data, correct or not")] short Desperate;
			[id(5), helpcontext(Ignore_Reply_Property), helpstring("Ignore messages and posts sent as replies")] boolean IgnoreReply;
			[id(6), helpcontext(Overwrite_Property), helpstring("Control can overwrite files on output")] boolean Overwrite;
			[id(7), helpcontext(Output_Path_Property), helpstring("Set default output path")] BSTR OutputPath;
			[id(17), helpcontext(Last_Message_Property), helpstring("Last message from engine")] BSTR LastMessage;
			[id(8), helpcontext(Dumb_Mode_Property), helpstring("All parts assumed to be in correct order")] boolean Dumb;
			[id(18), helpcontext(XFileCount_Property), helpstring("Number of files in deferred-delete list")] short XFileCount;
			[id(9), helpcontext(X_File_Auto_Property), helpstring("Automatically execute deferred delete")] boolean XFileAuto;
			[id(10), helpcontext(IDH_UseText_Property), helpstring("Decode MIME text files")] boolean UseText;
			[id(19), helpstring("Authorized Licensee of UUDeview ActiveX")] BSTR Licensee;
			[id(11), helpcontext(StrictMIME_Property), helpstring("Force strict MIME compliance")] boolean StrictMIME;
			[id(DISPID_CAPTION), bindable, requestedit] BSTR Caption;
			[id(12), helpcontext(RemoveAfter_Property), helpstring("Remove files consumed by decode operation")] boolean RemoveAfter;
			[id(13), helpstring("Folder to use for temporary files")] BSTR TempFolder;
			[id(14), helpstring("Strict interpretation of delimiters in unquoted filenames")] boolean StrictFilenames;
			//}}AFX_ODL_PROP

		methods:
			// NOTE - ClassWizard will maintain method information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_METHOD(CUud32acxCtrl)
			[id(20), helpcontext(IDH_Reset_Method), helpstring("Set control to initial state")] void Reset();
			[id(21), helpcontext(IDH_DLoad_Method), helpstring("Load an encoded file for later decoding")] ReturnCodes DLoad(BSTR file2load);
			[id(32), propget, helpcontext(DFile_Property), helpstring("Read the name of an encoded file found during loading")] BSTR DFile([in] short row);
			[id(32), propput, helpcontext(DFile_Property), helpstring("Change the name of a encoded file")] void DFile([in] short row, [in] BSTR lpszNewValue);
			[id(33), propget, helpcontext(DFileFlags_Property), helpstring("Read uudFile---- flags on an encoded file")] long DFileFlags([in] short row);
			[id(33), propput, helpcontext(DFileFlags_Property), helpstring("Set uudFile---- flags on an encoded file")] void DFileFlags([in] short row, [in] long nNewValue);
			[id(22), helpcontext(IDH_DFileTo_Method), helpstring("Decode a file to a specific name")] ReturnCodes DFileTo([in] short row, [in] BSTR toname);
			[id(34), propget, helpcontext(DFileInfo_Property), helpstring("Read text info above encoded data")] BSTR DFileInfo([in] short row);
			[id(34), propput] void DFileInfo([in] short row, BSTR lpszNewValue);
			[id(35), propget, helpcontext(DFileStatus_Property), helpstring("Text translation of encoded file status")] BSTR DFileStatus([in] short row);
			[id(35), propput] void DFileStatus([in] short row, [in] BSTR lpszNewValue);
			[id(23), helpcontext(IDH_Encode_Method), helpstring("Encode a file")] ReturnCodes Encode([in] BSTR InFileName, [in] BSTR OutFileName, [in] BSTR NameInFile, [in] EncodeModes EncodeMode, [in] long LinesPerFile, [in] EncodeHeaders Headers, [in, optional] VARIANT DestAddr, [in, optional] VARIANT FromAddr, [in, optional] VARIANT Subject);
			[id(24), helpcontext(IDH_DRemove_Method), helpstring("Remove a file from the DFiles list")] void DRemove([in] short row);
			[id(36), propget, helpcontext(DFileDetail_Property), helpstring("Get low-level detail about an encoded file")] VARIANT DFileDetail([in] short row, [in] DFileDetailItems SelectInfo, [in] short SubIndex);
			[id(36), propput] void DFileDetail([in] short row, [in] DFileDetailItems SelectInfo, [in] short SubIndex, [in] VARIANT newValue);
			[id(25), helpcontext(IDH_FileFilter_Method), helpstring("Remove dangerous characters from a filename")] BSTR FileFilter([in] BSTR FileName);
			[id(26), helpcontext(IDH_QuickDecode_Method), helpstring("Decode a file and write the resulting files to a directory")] ReturnCodes QuickDecode([in] BSTR File2Decode, [in] BSTR OutputPath, [in, defaultvalue(0)] boolean XFile);
			[id(27), helpcontext(IDH_XFileDel_Method), helpstring("Delete files on the deferred-delete list")] boolean XFileDel();
			[id(37), propget, helpcontext(XFile_Property), helpstring("Read a member of the deferred-delete list")] BSTR XFile([in] short row);
			[id(37), propput, helpcontext(XFile_Property), helpstring("Rename a member of the deferred-delete list")] void XFile([in] short row, [in] BSTR lpszNewValue);
			[id(28), helpcontext(IDH_XFileAdd_Method), helpstring("Add a file to the deferred-delete list")] boolean XFileAdd([in] BSTR File2Add);
			[id(29), helpcontext(IDH_ClipboardFile_Method), helpstring("Transfer the Clipboard to or from a text file")] boolean ClipboardFile([in] long hWnd, [in] BSTR Filename, [in, defaultvalue(uudCFcff)] ClipFileOperations CFMode);
			[id(30), helpcontext(IDH_CRC32_Method), helpstring("Calculate a file's CRC32")] boolean CRC32([in] BSTR Filename, [out] long* crc);
			[id(31), helpcontext(IDH_GetLastError_Method), helpstring("Read last WinAPI error")] boolean GetLastError([out] long* errNo, [out] BSTR* errMessage);
			//}}AFX_ODL_METHOD

			[id(DISPID_ABOUTBOX)] void AboutBox();
	};

	//  Event dispatch interface for CUud32acxCtrl

	[ uuid(6FC838A5-A54A-11D0-8988-444553540000),
	  helpstring("Event interface for Uud32acx Control") ]
	dispinterface _DUud32acxEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			// NOTE - ClassWizard will maintain event information here.
			//    Use extreme caution when editing this section.
			//{{AFX_ODL_EVENT(CUud32acxCtrl)
			[id(1), helpcontext(IDH_Message_Event), helpstring("Receive messages from the engine")] void Message(BSTR* Message, short Level);
			[id(2), helpcontext(IDH_Progress_Event), helpstring("Receive progress information from the engine")] void Progress(ProgressCodes CurrentAction, BSTR* CurrentFile, short PartNo, short TotalParts, long CurrentFileSize, short Percent, boolean* Cancel);
			//}}AFX_ODL_EVENT
	};

	//  Class information for CUud32acxCtrl

	[ uuid(6FC838A6-A54A-11D0-8988-444553540000),
	  helpstring("Uud32acx Control"), control ]
	coclass Uud32acx
	{
		[default] dispinterface _DUud32acx;
		[default, source] dispinterface _DUud32acxEvents;
	};


	//{{AFX_APPEND_ODL}}
	//}}AFX_APPEND_ODL}}
};
